version: 2.1
orbs:
  node: circleci/node@4.1.0
  kubernetes: circleci/kubernetes@0.11.0
  aws-ecr: circleci/aws-ecr@6.8.2
  aws-eks: circleci/aws-eks@1.1.0
  aws-cli: circleci/aws-cli@2.0.3
  aws-eb: circleci/aws-elastic-beanstalk@2.0.1

defaults: &defaults
  docker:
    - image: cimg/node:16.10.0

jobs:
  build:
    <<: *defaults
    steps:
      - checkout
      - restore_cache:
          name: Restore yarn cache
          key: node-modules-{{ checksum "yarn.lock" }}
      - run:
          name: Install modules
          command: yarn --frozen-lockfile install
      - save_cache:
          name: Save yarn cache
          key: node-modules-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      - run:
          name: Building services
          command: yarn build
          no_output_timeout: 30m
      - persist_to_workspace:
          root: ./
          paths:
            - build
            - src
            - public
            - devops
            - .eslintignore
            - .eslintrc.js
            - .git
            - .prettierignore
            - .prettierrc.yaml
            - node_modules
            - codecov.yml
            - yarn.lock
            - package.json
            - jest.json
            - tsconfig.json
            - Dockerfile

  test:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ./
      - restore_cache:
          name: Restore yarn cache
          key: node-modules-{{ checksum "yarn.lock" }}
      - run:
          name: Running tests
          command: yarn test
      - save_cache:
          name: Save yarn cache
          key: node-modules-{{ checksum "yarn.lock" }}
          paths:
            - node_modules
      # - persist_to_workspace:
      #     root: ./
      #     paths:
      #       - coverage

  prettier:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ./
      - restore_cache:
          name: Restore yarn cache
          key: node-modules-{{ checksum "yarn.lock" }}
      - run:
          name: Running prettier
          command: yarn prettier:lint
      - restore_cache:
          name: Restore yarn cache
          key: node-modules-{{ checksum "yarn.lock" }}

  lint:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ./
      - restore_cache:
          name: Restore yarn cache
          key: node-modules-{{ checksum "yarn.lock" }}
      - run:
          name: Running lint
          command: yarn lint
      - restore_cache:
          name: Restore yarn cache
          key: node-modules-{{ checksum "yarn.lock" }}

  codecov:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ./
      - restore_cache:
          name: Restore yarn cache
          key: node-modules-{{ checksum "yarn.lock" }}
      - run:
          name: Running code coverage
          command: echo "No codecov yet"
      - restore_cache:
          name: Restore yarn cache
          key: node-modules-{{ checksum "yarn.lock" }}

  push-image:
    <<: *defaults
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Prepare directory
          command: |
            ls .
            TAG=`echo $CIRCLE_BRANCH | sed 's/\\//_/g'`
            echo "TAG is $TAG"
            echo "export TAG=$TAG" >> $BASH_ENV
      # These envvars are set in CircleCI
      - aws-ecr/build-and-push-image:
          setup-remote-docker: true
          account-url: AWS_ECR_ACCOUNT_URL
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          region: AWS_DEFAULT_REGION
          create-repo: true
          checkout: false
          repo: serto-schemas-frontend # TODO/deploy This repo doesn't exist yet
          tag: "$TAG,$TAG-$CIRCLE_SHA1"

  deploy-image:
    <<: *defaults
    parameters:
      deployment-name:
        description: |
          Name of the deployment
        type: string
      cluster-name:
        description: |
          Name of the cluster
        type: string
    steps:
      - attach_workspace:
          at: ./
      - run:
          name: Set up tag var
          command: |
            TAG=`echo $CIRCLE_BRANCH | sed 's/\\//_/g'`
            echo "TAG is $TAG"
            echo "export TAG=$TAG" >> $BASH_ENV
      - aws-cli/install
      - aws-cli/setup:
          aws-access-key-id: $AWS_ACCESS_KEY_ID
          aws-region: $AWS_REGION
      - aws-eks/update-kubeconfig-with-authenticator:
          aws-region: $AWS_REGION
          install-kubectl: true
          verbose: true
          cluster-name: << parameters.cluster-name >>
      - deploy:
          name: Update Kubernetes Deployment
          command: |
            TAG=`echo $CIRCLE_BRANCH | sed 's/\\//_/g'`
            kubectl set image deployment/<< parameters.deployment-name >> << parameters.deployment-name >>=$AWS_ECR_ACCOUNT_URL/vcexplorerdemo:$TAG-$CIRCLE_SHA1
    
  eb-deploy:
    docker:
      - image: 'cimg/base:stable'
    parameters:
      app-dir:
        default: .
        type: string
      description:
        default: ''
        type: string
      environment-name:
        default: ''
        type: string
      image:
        default: 'cimg/base:stable'
        type: string
      label:
        default: ''
        type: string
      platform-version:
        default: docker
        type: string
    steps:
      - attach_workspace:
          at: ./
      - aws-eb/setup
      - run:
          name: Prepare directory
          command: |
           ls -al .
           TAG=`echo $CIRCLE_BRANCH | sed 's/\\//_/g'`
           echo "TAG is $TAG"
           echo "export TAG=$TAG" >> $BASH_ENV
           sed -i='' "s/<TAG>/$TAG-$CIRCLE_SHA1/" ./devops/deploy/docker-compose.yaml
      - run:
          command: |
            eb init <<parameters.environment-name>> -r $AWS_DEFAULT_REGION -p <<parameters.platform-version>>
            eb deploy <<parameters.environment-name>> <<#parameters.label>>-l <<parameters.label>><</parameters.label>> <<#parameters.description>>-m <<parameters.description>><</parameters.description>>
          name: EB Deploy
          working_directory: <<parameters.app-dir>>


workflows:
  build-test-deploy:
    jobs:
      - build
      - test:
          requires:
            - build
      - prettier:
          requires:
            - build
      - lint:
          requires:
            - build
      - codecov:
          requires:
            - test
      - push-image:
          name: push-ui-image
          requires:
            - build
            - test
            - lint
            - codecov
          filters:
            branches:
              only:
                - master
                - aldigjo/fix-ci
      # - deploy-image:
      #     name: deploy-ui-image
      #     deployment-name: ui
      #     cluster-name: alpha
      #     requires:
      #       - push-ui-image
      #     filters:
      #       branches:
      #         only:
      #           - master
      #           - sruddy/continuous-deploy
      - eb-deploy:
          app-dir: ./devops/deploy
          environment-name: SertoSchemaFrontendStaging
          label: version-<<pipeline.number>>
          filters:
            branches:
              only:
                - master
                - aldigjo/fix-ci
          requires:
            - push-ui-image
